<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MateChat - Panel de Mensajes</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }
        
        header {
            background-color: #128C7E;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        h1 {
            font-size: 1.8rem;
            margin: 0;
        }
        
        .status-bar {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .status-indicator {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 15px;
            font-weight: bold;
            font-size: 0.9rem;
        }
        
        .connected {
            background-color: #25D366;
            color: white;
        }
        
        .disconnected {
            background-color: #E60023;
            color: white;
        }
        
        .button {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            background-color: #075E54;
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }
        
        main.chat-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .chat-sidebar {
            width: 300px;
            background-color: white;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            padding: 15px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f8f9fa;
        }
        
        .chat-header h3 {
            font-size: 1.1rem;
            color: #075E54;
            margin: 0;
        }
        
        .reload-button {
            border: none;
            background-color: #25D366;
            color: white;
            border-radius: 5px;
            width: 30px;
            height: 30px;
            font-size: 1.2rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-contacts {
            flex: 1;
            overflow-y: auto;
        }
        
        #contacts-list {
            list-style: none;
        }
        
        #contacts-list li {
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        #contacts-list li:hover {
            background-color: #f5f5f5;
        }
        
        #contacts-list li.active {
            background-color: #e8f5e9;
            border-left: 3px solid #25D366;
        }
        
        .contact-name {
            font-weight: bold;
            color: #075E54;
            margin-bottom: 5px;
        }
        
        .contact-preview {
            font-size: 0.9rem;
            color: #777;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: #e0e0e0;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }
        
        #messages-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .message {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 10px;
            position: relative;
        }
        
        .message-incoming {
            align-self: flex-start;
            background-color: white;
        }
        
        .message-outgoing {
            align-self: flex-end;
            background-color: #dcf8c6;
        }
        
        .message-content {
            margin-bottom: 5px;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #888;
            text-align: right;
        }
        
        .chat-input {
            background-color: white;
            padding: 15px;
            border-top: 1px solid #e0e0e0;
        }
        
        #message-form {
            display: flex;
            gap: 10px;
        }
        
        #message-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #e0e0e0;
            border-radius: 20px;
            outline: none;
        }
        
        #send-button {
            background-color: #25D366;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .select-contact {
            text-align: center;
            color: #888;
            margin-top: 50px;
            font-size: 1.1rem;
        }
        
        .loading {
            text-align: center;
            padding: 15px;
            color: #777;
        }
        
        .error {
            text-align: center;
            padding: 15px;
            color: #E60023;
        }
        
        footer {
            background-color: #f8f9fa;
            padding: 10px 20px;
            text-align: center;
            font-size: 0.9rem;
            color: #777;
            border-top: 1px solid #e0e0e0;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>MateChat</h1>
            <div class="status-bar">
                <div class="whatsapp-status">
                    WhatsApp: <span id="connection-status" class="status-indicator disconnected">Verificando...</span>
                </div>
                <a href="/" class="button">Inicio</a>
            </div>
        </header>
        
        <main class="chat-container">
            <div class="chat-sidebar">
                <div class="chat-header">
                    <h3>Contactos Recientes</h3>
                    <button id="reload-button" class="reload-button" title="Recargar contactos">↻</button>
                </div>
                <div class="chat-contacts">
                    <ul id="contacts-list">
                        <li class="loading">Cargando contactos...</li>
                    </ul>
                </div>
            </div>
            
            <div class="chat-main">
                <div class="chat-messages">
                    <div id="messages-container">
                        <p class="select-contact">Selecciona un contacto para ver los mensajes</p>
                    </div>
                </div>
                
                <div class="chat-input" id="chat-input-container" style="display: none;">
                    <form id="message-form">
                        <input type="text" id="message-input" placeholder="Escribe un mensaje..." />
                        <button type="submit" id="send-button">Enviar</button>
                    </form>
                </div>
            </div>
        </main>
        
        <footer>
            <p>&copy; 2025 MateChat - Integración WhatsApp</p>
        </footer>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Inicializar Socket.IO
        const socket = io();
        const connectionStatus = document.getElementById('connection-status');
        
        // Verificar si hay conexión
        function checkConnection() {
            console.log('Verificando estado de WhatsApp...');
            
            fetch('/api/whatsapp-status')
                .then(response => response.json())
                .then(data => {
                    console.log('Estado recibido:', data);
                    updateConnectionStatus(data.isConnected);
                })
                .catch(error => {
                    console.error('Error al verificar estado:', error);
                    connectionStatus.textContent = 'Error';
                    connectionStatus.className = 'status-indicator disconnected';
                });
        }
        
        // Actualizar indicador de estado
        function updateConnectionStatus(isConnected) {
            if (isConnected) {
                connectionStatus.textContent = 'Conectado';
                connectionStatus.className = 'status-indicator connected';
            } else {
                connectionStatus.textContent = 'Desconectado';
                connectionStatus.className = 'status-indicator disconnected';
                
                // Redirigir a la página de inicio si no hay conexión y no es acceso forzado
                const urlParams = new URLSearchParams(window.location.search);
                if (!urlParams.get('force')) {
                    alert('No hay conexión con WhatsApp. Redirigiendo a la página de inicio.');
                    window.location.href = '/';
                }
            }
        }
        
        // Escuchar cambios de estado
        socket.on('whatsappStatus', (data) => {
            console.log('Actualización de estado de WhatsApp:', data);
            updateConnectionStatus(data.status === 'connected');
        });
        
        // Cargar mensajes al iniciar
        const loadMessages = () => {
            fetch('/api/messages')
                .then(response => response.json())
                .then(messages => {
                    // Procesar contactos y mensajes
                    processMessages(messages);
                })
                .catch(error => {
                    console.error('Error al cargar mensajes:', error);
                    document.getElementById('contacts-list').innerHTML = 
                        '<li class="error">Error al cargar contactos</li>';
                });
        };
        
        // Procesar mensajes y mostrar contactos
        function processMessages(messages) {
            // Objeto para almacenar contactos organizados
            const contacts = {};
            
            // Procesar mensajes
            messages.forEach(message => {
                const phoneNumber = message.phoneNumber;
                
                if (!contacts[phoneNumber]) {
                    contacts[phoneNumber] = {
                        lastMessage: message,
                        messages: [message]
                    };
                } else {
                    contacts[phoneNumber].messages.push(message);
                    
                    // Actualizar último mensaje si es más reciente
                    if (new Date(message.timestamp) > new Date(contacts[phoneNumber].lastMessage.timestamp)) {
                        contacts[phoneNumber].lastMessage = message;
                    }
                }
            });
            
            // Actualizar lista de contactos
            updateContactsList(contacts);
        }
        
        // Actualizar lista de contactos
        function updateContactsList(contacts) {
            const contactsList = document.getElementById('contacts-list');
            
            // Ordenar contactos por mensaje más reciente
            const sortedContacts = Object.entries(contacts)
                .sort((a, b) => new Date(b[1].lastMessage.timestamp) - new Date(a[1].lastMessage.timestamp));
            
            // Mostrar mensaje si no hay contactos
            if (sortedContacts.length === 0) {
                contactsList.innerHTML = '<li class="loading">No hay contactos aún</li>';
                return;
            }
            
            // Limpiar lista actual
            contactsList.innerHTML = '';
            
            // Añadir cada contacto
            sortedContacts.forEach(([phoneNumber, contactData]) => {
                const li = document.createElement('li');
                li.dataset.phoneNumber = phoneNumber;
                
                // Formatear número para mostrar
                const formattedPhone = formatPhoneNumber(phoneNumber);
                
                // Obtener vista previa del último mensaje
                const lastMessage = contactData.lastMessage.content;
                const preview = lastMessage.length > 30 ? lastMessage.substring(0, 30) + '...' : lastMessage;
                
                // Crear HTML del contacto
                li.innerHTML = `
                    <div class="contact-name">${formattedPhone}</div>
                    <div class="contact-preview">${preview}</div>
                `;
                
                // Añadir evento de clic
                li.addEventListener('click', () => selectContact(phoneNumber, contacts));
                
                // Añadir a la lista
                contactsList.appendChild(li);
            });
        }
        
        // Seleccionar un contacto
        function selectContact(phoneNumber, contactsData) {
            // Actualizar estado activo en la lista
            const items = document.querySelectorAll('#contacts-list li');
            items.forEach(item => item.classList.remove('active'));
            
            const selectedItem = document.querySelector(`#contacts-list li[data-phone-number="${phoneNumber}"]`);
            if (selectedItem) {
                selectedItem.classList.add('active');
            }
            
            // Mostrar mensajes del contacto
            const messagesContainer = document.getElementById('messages-container');
            const chatInputContainer = document.getElementById('chat-input-container');
            
            // Obtener mensajes del contacto
            const contact = contactsData[phoneNumber];
            if (!contact) {
                messagesContainer.innerHTML = '<p class="select-contact">No se encontraron mensajes</p>';
                return;
            }
            
            // Ordenar mensajes por tiempo (más antiguos primero)
            const messages = [...contact.messages].sort((a, b) => 
                new Date(a.timestamp) - new Date(b.timestamp)
            );
            
            // Limpiar y mostrar mensajes
            messagesContainer.innerHTML = '';
            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                
                // Determinar si es entrante o saliente
                const isIncoming = message.responseStatus === 'Pending';
                messageDiv.classList.add(isIncoming ? 'message-incoming' : 'message-outgoing');
                
                // Formatear hora y fecha
                const timestamp = new Date(message.timestamp);
                const formattedTime = timestamp.toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                const formattedDate = timestamp.toLocaleDateString();
                
                // Crear HTML del mensaje
                messageDiv.innerHTML = `
                    <div class="message-content">${message.content}</div>
                    <div class="message-time">${formattedTime} | ${formattedDate}</div>
                `;
                
                messagesContainer.appendChild(messageDiv);
            });
            
            // Mostrar formulario de envío
            chatInputContainer.style.display = 'block';
            
            // Configurar formulario para este contacto
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            
            // Remover eventos anteriores
            messageForm.onsubmit = null;
            
            // Añadir nuevo evento
            messageForm.onsubmit = function(e) {
                e.preventDefault();
                
                const content = messageInput.value.trim();
                if (!content) return;
                
                // Limpiar campo
                messageInput.value = '';
                
                // Enviar mensaje
                sendMessage(phoneNumber, content);
            };
            
            // Hacer scroll hacia abajo
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Enviar mensaje
        function sendMessage(phoneNumber, content) {
            fetch('/api/send-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    phoneNumber: phoneNumber,
                    content: content
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al enviar mensaje');
                }
                return response.json();
            })
            .then(data => {
                console.log('Mensaje enviado correctamente:', data);
                // Recargar mensajes
                loadMessages();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al enviar mensaje. Por favor, intenta de nuevo.');
            });
        }
        
        // Formatear número de teléfono
        function formatPhoneNumber(phoneNumber) {
            // Quitar sufijo @c.us si está presente
            let formatted = phoneNumber.replace('@c.us', '');
            
            // Dar formato para mejor legibilidad
            if (formatted.length > 10) {
                const countryCode = formatted.substring(0, formatted.length - 10);
                const number = formatted.substring(formatted.length - 10);
                
                formatted = '+' + countryCode + ' ' + number.substring(0, 3) + ' ' + 
                    number.substring(3, 6) + ' ' + number.substring(6);
            }
            
            return formatted;
        }
        
        // Recargar contactos
        document.getElementById('reload-button').addEventListener('click', loadMessages);
        
        // Comprobar conexión y cargar mensajes al inicio
        document.addEventListener('DOMContentLoaded', () => {
            checkConnection();
            loadMessages();
            
            // Escuchar por nuevos mensajes
            socket.on('newMessage', (message) => {
                console.log('Nuevo mensaje recibido:', message);
                loadMessages(); // Recargar para mostrar el nuevo mensaje
            });
        });
    </script>
</body>
</html>